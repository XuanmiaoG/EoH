[
     {
          "algorithm": "The new algorithm calculates scores by combining a weighted logarithmic decay of remaining capacity, a penalty for bins with remaining capacity close to the item size, a term that prioritizes bins with higher remaining capacity relative to the item size, and a term that penalizes bins with very small remaining capacity.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the logarithmic decay of remaining capacity\n    log_decay = np.log1p(bins / np.max(bins))\n    \n    # Calculate the penalty for bins with remaining capacity close to the item size\n    penalty = 1 / (1 + np.abs(bins - item))\n    \n    # Calculate the relative capacity term\n    relative_capacity = bins / item\n    \n    # Calculate the penalty for bins with very small remaining capacity\n    small_capacity_penalty = np.where(bins < item * 0.1, 0.1, 1.0)\n    \n    # Combine the terms to calculate the scores\n    scores = log_decay * penalty * relative_capacity * small_capacity_penalty\n    \n    return scores",
          "objective": 0.03924,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the normalized remaining capacity\n    normalized_capacity = bins / np.max(bins)\n    \n    # Calculate the penalty for bins with remaining capacity close to the item size\n    penalty = 1 / (1 + np.abs(bins - item))\n    \n    # Calculate the score as a combination of normalized capacity, penalty, and a logarithmic term\n    scores = normalized_capacity * penalty * np.log1p(bins)\n    \n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates scores by combining a weighted exponential decay of remaining capacity, a penalty for bins with remaining capacity close to the item size, and a term that prioritizes bins with higher remaining capacity relative to the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the exponential decay of remaining capacity\n    exp_decay = np.exp(-bins / np.max(bins))\n    \n    # Calculate the penalty for bins with remaining capacity close to the item size\n    penalty = 1 / (1 + np.abs(bins - item))\n    \n    # Calculate the relative capacity term\n    relative_capacity = bins / item\n    \n    # Combine the terms to calculate the scores\n    scores = exp_decay * penalty * relative_capacity\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on a combination of the bin's remaining capacity, the item size, and a sigmoid function that penalizes bins with remaining capacity close to the item size, while also incorporating a power-law decay term to prioritize bins with larger remaining capacities.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the sigmoid penalty term to discourage using bins with remaining capacity close to the item size\n    penalty = 1 / (1 + np.exp(-10 * (np.abs(bins - item) / item - 0.5)))\n    \n    # Calculate the power-law decay of the bin's remaining capacity relative to the item size\n    decay = np.power(bins / item, -0.5)\n    \n    # Calculate the score as a combination of remaining capacity, penalty, and decay\n    scores = bins * (1 - penalty) * decay\n    \n    return scores",
          "objective": 0.05514,
          "other_inf": null
     }
]