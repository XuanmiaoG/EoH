[
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the normalized remaining capacity\n    normalized_capacity = bins / np.max(bins)\n    \n    # Calculate the penalty for bins with remaining capacity close to the item size\n    penalty = 1 / (1 + np.abs(bins - item))\n    \n    # Calculate the score as a combination of normalized capacity, penalty, and a logarithmic term\n    scores = normalized_capacity * penalty * np.log1p(bins)\n    \n    return scores",
          "objective": 0.03974,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates scores by combining a weighted exponential decay of remaining capacity, a penalty for bins with remaining capacity close to the item size, and a term that prioritizes bins with higher remaining capacity relative to the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the exponential decay of remaining capacity\n    exp_decay = np.exp(-bins / np.max(bins))\n    \n    # Calculate the penalty for bins with remaining capacity close to the item size\n    penalty = 1 / (1 + np.abs(bins - item))\n    \n    # Calculate the relative capacity term\n    relative_capacity = bins / item\n    \n    # Combine the terms to calculate the scores\n    scores = exp_decay * penalty * relative_capacity\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns a score to each bin based on a weighted combination of the bin's remaining capacity, the item size, and a penalty for bins with remaining capacity equal to their maximum capacity, aiming to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    penalty = np.where(bins == max_capacity, -np.inf, 0)\n    scores = bins - item + penalty\n    return scores",
          "objective": 0.13211,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns a score to each bin based on a combination of the bin's remaining capacity, the item size, and a penalty term that discourages using bins with remaining capacity close to the item size, while also considering the exponential decay of the bin's remaining capacity relative to the item size.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the penalty term to discourage using bins with remaining capacity close to the item size\n    penalty = np.exp(-np.abs(bins - item) / item)\n    \n    # Calculate the exponential decay of the bin's remaining capacity relative to the item size\n    decay = np.exp(-bins / item)\n    \n    # Calculate the score as a combination of remaining capacity, penalty, and decay\n    scores = bins * (1 - penalty) * decay\n    \n    return scores",
          "objective": 0.43576,
          "other_inf": null
     }
]