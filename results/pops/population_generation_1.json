[
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef calculate_total_distance(node, unvisited_nodes, distance_matrix):\n    total_distance = 0\n    for other_node in unvisited_nodes:\n        total_distance += distance_matrix[node][other_node]\n    return total_distance\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if len(unvisited_nodes) == 0:\n        return destination_node\n        \n    min_distance = float('inf')\n    next_node_index = unvisited_nodes[0]\n    \n    for node in unvisited_nodes:\n        total_distance = calculate_total_distance(node, unvisited_nodes, distance_matrix)\n        if total_distance < min_distance:\n            min_distance = total_distance\n            next_node_index = node\n            \n    return next_node_index",
          "objective": 1.33209,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef compute_total_distance_for_node(node, distance_matrix, unvisited_nodes):\n    total_distance = 0\n    for other_node in range(len(distance_matrix)):\n        if other_node not in unvisited_nodes:\n            total_distance += distance_matrix[other_node][node]\n    return total_distance\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if len(unvisited_nodes) == 0:\n        return destination_node\n        \n    total_distances = []\n    for node in unvisited_nodes:\n        total_distance = compute_total_distance_for_node(node, distance_matrix, unvisited_nodes)\n        total_distances.append((total_distance, node))\n        \n    total_distances.sort()\n    next_node_index = total_distances[0][1]\n    return next_node_index",
          "objective": 1.44825,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef calculate_total_cost(candidate_node, distance_matrix, agents):\n    total_cost = 0\n    for agent in agents:\n        total_cost += min(distance_matrix[agent][candidate_node] for agent in agents)\n    return total_cost\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if len(unvisited_nodes) == 0:\n        return destination_node\n        \n    costs = []\n    for node in unvisited_nodes:\n        cost = calculate_total_cost(node, distance_matrix, range(len(distance_matrix)))\n        costs.append((cost, node))\n        \n    costs.sort()\n    next_node_index = costs[0][1]\n    return next_node_index",
          "objective": 1.80275,
          "other_inf": null
     },
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef calculate_cost_difference(current_node, candidate_node, distance_matrix):\n    total_cost_difference = 0\n    for node in range(len(distance_matrix)):\n        if node == current_node or node == candidate_node:\n            continue\n        current_cost = distance_matrix[node][current_node]\n        candidate_cost = distance_matrix[node][candidate_node]\n        total_cost_difference += candidate_cost - current_cost\n    return total_cost_difference\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if len(unvisited_nodes) == 0:\n        return destination_node\n        \n    cost_differences = []\n    for node in unvisited_nodes:\n        cost_difference = calculate_cost_difference(current_node, node, distance_matrix)\n        cost_differences.append((cost_difference, node))\n        \n    cost_differences.sort()\n    next_node_index = cost_differences[0][1]\n    return next_node_index",
          "objective": 1.84144,
          "other_inf": null
     }
]