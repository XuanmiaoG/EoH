[
     {
          "algorithm": "Implementing a 'Best Constant' by searching over a fixed number of candidate positions distributed evenly in [0,1].",
          "code": "import numpy as np\n\ndef place_facilities(peaks, weights, k):\n    # {Implementing a 'Best Constant' by searching over a fixed number of candidate positions distributed evenly in [0,1].}\n    \n    candidate_positions = np.linspace(0, 1, 101)\n    facilities_positions = []\n    \n    for position in candidate_positions:\n        cost = np.sum(weights * np.abs(peaks - position))\n        facilities_positions.append((position, cost))\n    \n    # Sort by cost\n    facilities_positions.sort(key=lambda x: x[1])\n    \n    # Select the top k positions with the lowest cost\n    best_positions = [fac_position[0] for fac_position in facilities_positions[:k]]\n    \n    return facilities_positions",
          "objective": 0.07703,
          "other_inf": null
     },
     {
          "algorithm": "Implementing a 'Best Median Rule' by selecting facilities at the median of weighted peaks in ordered segments.",
          "code": "import numpy as np\n\ndef place_facilities(peaks, weights, k):\n    # {Implementing a 'Best Median Rule' by selecting facilities at the median of weighted peaks in ordered segments.}\n    \n    sorted_peaks = np.sort(peaks)\n    n = len(peaks)\n    facilities_positions = []\n    \n    # Divide the sorted peaks into k segments and find the weighted median for each segment\n    segment_size = n // k\n    for i in range(k):\n        start_index = i * segment_size\n        if i == k - 1:  # Last segment takes the remainder\n            end_index = n\n        else:\n            end_index = (i + 1) * segment_size\n            \n        segment_weights = weights[start_index:end_index]\n        segment_data = sorted_peaks[start_index:end_index]\n        \n        # Calculate the weighted median using a cumulative approach\n        total_weight = np.sum(segment_weights)\n        cumulative_weight = 0\n        median_position = None\n        \n        for j in range(len(segment_data)):\n            cumulative_weight += segment_weights[j]\n            if cumulative_weight >= total_weight / 2:\n                median_position = segment_data[j]\n                break\n        \n        facilities_positions.append(median_position)\n    \n    return facilities_positions",
          "objective": 1.87498,
          "other_inf": null
     },
     {
          "algorithm": "Using a clustering approach to find k facility positions by applying k-means clustering on the weighted peaks.",
          "code": "import numpy as np\n\ndef place_facilities(peaks, weights, k):\n    # {Using a clustering approach to find k facility positions by applying k-means clustering on the weighted peaks.}\n    \n    from sklearn.cluster import KMeans\n    \n    # Reshape for clustering\n    weighted_peaks = np.repeat(peaks, weights.astype(int))  # Repeat each peak according to its weight\n    weighted_peaks = weighted_peaks.reshape(-1, 1)  # Reshape for KMeans\n    \n    kmeans = KMeans(n_clusters=k)\n    kmeans.fit(weighted_peaks)\n    \n    facilities_positions = np.sort(kmeans.cluster_centers_.flatten())\n    \n    return facilities_positions",
          "objective": 1.89196,
          "other_inf": null
     },
     {
          "algorithm": "Implementing a 'Best K-means-like' approach that clusters agents based on their peaks to minimize their total costs.",
          "code": "import numpy as np\n\ndef place_facilities(peaks, weights, k):\n    # {Implementing a 'Best K-means-like' approach that clusters agents based on their peaks to minimize their total costs.}\n    \n    from sklearn.cluster import KMeans\n    \n    # Reshape peaks for KMeans input\n    peaks = peaks.reshape(-1, 1)\n    \n    # Fit KMeans to find k clusters in the peaks\n    kmeans = KMeans(n_clusters=k).fit(peaks, sample_weight=weights)\n    \n    # Get the cluster centers as facility positions\n    facilities_positions = np.sort(kmeans.cluster_centers_.flatten())\n    \n    return facilities_positions",
          "objective": 1.8923,
          "other_inf": null
     }
]