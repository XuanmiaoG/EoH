[
     {
          "algorithm": "The algorithm assigns a score to each bin based on a weighted combination of the bin's remaining capacity, the item size, and a penalty for bins with remaining capacity equal to their maximum capacity, aiming to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    max_capacity = np.max(bins)\n    penalty = np.where(bins == max_capacity, -np.inf, 0)\n    scores = bins - item + penalty\n    return scores",
          "objective": 0.13211,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns a score to each bin based on a weighted combination of the bin's remaining capacity, the item size, and the inverse of the bin's current utilization, ensuring bins with higher remaining capacity and lower utilization are prioritized to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate utilization (1 - remaining capacity / max capacity)\n    # Assuming max capacity is the initial capacity, which is the sum of remaining capacity and used capacity\n    # Since we don't have the initial capacity, we assume it's the sum of remaining capacity and item size for simplicity\n    max_capacity = bins + item\n    utilization = 1 - (bins / max_capacity)\n    \n    # Calculate the score as a weighted combination of remaining capacity, item size, and inverse utilization\n    scores = 0.5 * bins + 0.3 * item - 0.2 * utilization\n    \n    return scores",
          "objective": 1.51534,
          "other_inf": null
     }
]