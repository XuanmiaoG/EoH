{
     "algorithm": "The new algorithm calculates scores for bins by combining a hyperbolic tangent-based penalty for remaining capacity, a dynamic weight based on the Gaussian decay of remaining capacity, and a cubic normalization factor, ensuring bins with smaller remaining capacities are prioritized while avoiding over-penalizing nearly full bins.",
     "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the normalized remaining capacity after placing the item\n    remaining_capacity = bins - item\n    normalized_capacity = (remaining_capacity / bins) ** 3\n    \n    # Calculate a hyperbolic tangent-based penalty based on the bin's remaining capacity\n    penalty = np.where(remaining_capacity > 0, np.tanh(remaining_capacity / item), -np.inf)\n    \n    # Calculate a dynamic weight based on the Gaussian decay of the bin's remaining capacity\n    weight = np.exp(-(remaining_capacity / item) ** 2)\n    \n    # Calculate the score as a combination of normalized capacity, penalty, and weight\n    scores = normalized_capacity * penalty * weight\n    \n    return scores",
     "objective": 0.01117,
     "other_inf": null
}