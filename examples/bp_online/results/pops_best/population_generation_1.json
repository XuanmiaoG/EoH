{
     "algorithm": "The new algorithm assigns a score to each bin based on a combination of the bin's remaining capacity, the item size, a penalty for bins with remaining capacity equal to their maximum capacity, and a dynamic weight that prioritizes bins with the least remaining capacity after item placement, aiming to minimize the number of used bins while ensuring efficient packing.",
     "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the penalty for bins with remaining capacity equal to their maximum capacity\n    max_capacity = bins.max()\n    penalty = np.where(bins == max_capacity, -np.inf, 0)\n    \n    # Calculate the remaining capacity after placing the item\n    remaining_capacity = bins - item\n    \n    # Calculate a dynamic weight based on the remaining capacity\n    weight = 1 / (remaining_capacity + 1e-9)  # Add a small epsilon to avoid division by zero\n    \n    # Calculate the score based on the remaining capacity, item size, penalty, and dynamic weight\n    scores = (remaining_capacity / bins) * weight + penalty\n    \n    return scores",
     "objective": 0.04779,
     "other_inf": null
}