[
     {
          "algorithm": "```",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the normalized remaining capacity after placing the item\n    remaining_capacity = bins - item\n    normalized_capacity = remaining_capacity / bins\n    \n    # Calculate a dynamic penalty based on the bin's remaining capacity and item size\n    penalty = np.where(remaining_capacity > 0, np.exp(-remaining_capacity / item), -np.inf)\n    \n    # Calculate a weight based on the inverse of the bin's remaining capacity\n    weight = 1 / (remaining_capacity + 1e-9)\n    \n    # Calculate the score as a combination of normalized capacity, penalty, and weight\n    scores = normalized_capacity * penalty * weight\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates scores for bins by combining a logarithmic penalty for remaining capacity, a dynamic weight based on the inverse of the remaining capacity, and a normalized capacity factor, ensuring bins with smaller remaining capacities are prioritized while avoiding over-penalizing nearly full bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the normalized remaining capacity after placing the item\n    remaining_capacity = bins - item\n    normalized_capacity = remaining_capacity / bins\n    \n    # Calculate a logarithmic penalty based on the bin's remaining capacity\n    penalty = np.where(remaining_capacity > 0, np.log1p(remaining_capacity / item), -np.inf)\n    \n    # Calculate a dynamic weight based on the inverse of the bin's remaining capacity\n    weight = 1 / (remaining_capacity + 1e-9)\n    \n    # Calculate the score as a combination of normalized capacity, penalty, and weight\n    scores = normalized_capacity * penalty * weight\n    \n    return scores",
          "objective": 0.04598,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on a combination of the bin's remaining capacity, the item size, a penalty for bins with remaining capacity equal to their maximum capacity, and a dynamic weight that prioritizes bins with the least remaining capacity after item placement, aiming to minimize the number of used bins while ensuring efficient packing.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the penalty for bins with remaining capacity equal to their maximum capacity\n    max_capacity = bins.max()\n    penalty = np.where(bins == max_capacity, -np.inf, 0)\n    \n    # Calculate the remaining capacity after placing the item\n    remaining_capacity = bins - item\n    \n    # Calculate a dynamic weight based on the remaining capacity\n    weight = 1 / (remaining_capacity + 1e-9)  # Add a small epsilon to avoid division by zero\n    \n    # Calculate the score based on the remaining capacity, item size, penalty, and dynamic weight\n    scores = (remaining_capacity / bins) * weight + penalty\n    \n    return scores",
          "objective": 0.04779,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns scores to bins based on a combination of the bin's remaining capacity, the item size, and a dynamic penalty that increases with the bin's remaining capacity, while also considering the inverse of the bin's capacity to prioritize bins with just enough space for the item.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the difference between bin capacities and the item size\n    diff = bins - item\n    # Calculate a dynamic penalty that increases with the bin's remaining capacity\n    penalty = np.where(diff > 0, diff / bins, np.inf)\n    # Calculate scores as a combination of the inverse of the bin's capacity and the penalty\n    scores = (1 / bins) * np.exp(-penalty)\n    return scores",
          "objective": 0.05071,
          "other_inf": null
     }
]