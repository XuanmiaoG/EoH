[
     {
          "algorithm": "The algorithm assigns a score to each bin based on a weighted combination of the remaining capacity, the inverse of the remaining capacity, and a penalty for bins with maximum capacity, ensuring bins are used efficiently to minimize the total number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the remaining capacity after placing the item\n    remaining_capacity = bins - item\n    \n    # Penalize bins with maximum capacity (they should not be used)\n    max_capacity_penalty = np.where(bins == bins.max(), -np.inf, 0)\n    \n    # Calculate the score as a weighted combination of remaining capacity and its inverse\n    scores = 0.5 * remaining_capacity + 0.5 * (1 / (remaining_capacity + 1e-9)) + max_capacity_penalty\n    \n    return scores",
          "objective": 0.03874,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns a score to each bin based on a weighted combination of the bin's remaining capacity, the item size, and a penalty for bins with remaining capacity equal to their maximum capacity, aiming to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Define weights for the scoring function\n    weight_capacity = 0.6\n    weight_item = 0.3\n    weight_penalty = 0.1\n    \n    # Calculate the score for each bin\n    scores = weight_capacity * (1 - bins) + weight_item * (item / bins) - weight_penalty * (bins == 1)\n    \n    return scores",
          "objective": 0.03984,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns an item to a bin by scoring each feasible bin based on a combination of its remaining capacity, the item size, and a penalty for bins with maximum capacity, aiming to minimize the number of used bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Calculate the penalty for bins with maximum capacity (rest capacity equals maximum capacity)\n    penalty = np.where(bins == bins.max(), -np.inf, 0)\n    \n    # Calculate the score for each bin based on remaining capacity and item size\n    scores = (bins - item) / bins + penalty\n    \n    return scores",
          "objective": 0.13211,
          "other_inf": null
     }
]