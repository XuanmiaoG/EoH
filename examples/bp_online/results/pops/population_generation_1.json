[
     {
          "algorithm": "The new algorithm assigns a score to each bin based on a logarithmic transformation of the remaining capacity relative to the item size, combined with a dynamic penalty that increases exponentially for bins with remaining capacity close to their maximum capacity, ensuring efficient bin usage and minimizing the total number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Dynamic penalty for bins with remaining capacity close to maximum capacity\n    penalty = np.exp(-(bins.max() - bins) / bins.max()) * (bins == bins.max()) * -np.inf\n    \n    # Logarithmic transformation of remaining capacity relative to item size\n    scores = np.log1p((bins - item) / bins) + penalty\n    \n    return scores",
          "objective": 0.04226,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on a combination of a sigmoid transformation of the remaining capacity relative to the item size, a linear penalty for bins with remaining capacity close to their maximum capacity, and a bonus for bins with remaining capacity close to the item size, ensuring efficient bin usage and minimizing the total number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Sigmoid transformation of remaining capacity relative to item size\n    sigmoid = 1 / (1 + np.exp(-(bins - item) / item))\n    \n    # Linear penalty for bins with remaining capacity close to maximum capacity\n    penalty = -np.exp(-(bins.max() - bins) / bins.max()) * (bins == bins.max()) * 100\n    \n    # Bonus for bins with remaining capacity close to the item size\n    bonus = np.exp(-np.abs(bins - item) / item) * (bins > item)\n    \n    # Combine components to compute scores\n    scores = sigmoid + penalty + bonus\n    \n    return scores",
          "objective": 0.04779,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm assigns a score to each bin based on a combination of the bin's remaining capacity, the item size, a penalty for bins with remaining capacity equal to their maximum capacity, and a reward for bins that are closer to being filled to a certain threshold, ensuring efficient bin usage to minimize the total number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Penalty for bins with remaining capacity equal to maximum capacity\n    penalty = np.where(bins == bins.max(), -np.inf, 0)\n    \n    # Reward for bins that are closer to being filled to a certain threshold\n    threshold = 0.8 * bins.max()\n    reward = np.where(bins <= threshold, (threshold - bins) / threshold, 0)\n    \n    # Score based on remaining capacity, item size, penalty, and reward\n    scores = (bins - item) / bins + penalty + reward\n    \n    return scores",
          "objective": 0.12386,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm assigns a score to each bin based on a combination of the bin's remaining capacity, the item size, and a dynamic penalty that increases exponentially with the number of bins already used, encouraging the reuse of existing bins to minimize the total number of bins.",
          "code": "import numpy as np\n\ndef score(item, bins):\n    # Dynamic penalty based on the number of bins already used\n    num_used_bins = np.sum(bins != bins.max())\n    penalty = np.exp(num_used_bins) * (bins == bins.max())\n    \n    # Score based on remaining capacity, item size, and dynamic penalty\n    scores = (bins - item) / (bins + 1) - penalty\n    \n    return scores",
          "objective": 0.12687,
          "other_inf": null
     }
]