{
     "algorithm": "The algorithm calculates a score for an item by combining its value with an exponential decay factor based on the remaining capacity, prioritizing items that maximize value while minimizing the risk of leaving significant unused capacity.",
     "code": "import numpy as np\nfrom numba import jit\n\n@jit(nopython=True)\ndef score(weight, value, remaining_capacity):\n    if weight > remaining_capacity:\n        return -np.inf  # Item cannot fit, assign lowest possible score\n    decay_factor = np.exp(-remaining_capacity / weight)\n    score = value * decay_factor\n    return score",
     "objective": -0.49214,
     "other_inf": null
}