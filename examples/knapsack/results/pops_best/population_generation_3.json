{
     "algorithm": "The algorithm calculates a score for an item by combining its value-to-weight ratio with an exponential decay factor that prioritizes items that leave the remaining capacity as close as possible to zero, ensuring efficient utilization of the knapsack's capacity.",
     "code": "import numpy as np\nfrom numba import jit\n\n@jit(nopython=True)\ndef score(weight, value, remaining_capacity):\n    if weight > remaining_capacity:\n        return -np.inf  # Item cannot fit, assign lowest possible score\n    value_to_weight = value / weight\n    decay_factor = np.exp(-(remaining_capacity - weight))  # Exponential decay for unused capacity\n    score = value_to_weight * decay_factor\n    return score",
     "objective": -0.54979,
     "other_inf": null
}