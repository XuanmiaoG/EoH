[
     {
          "algorithm": "The new algorithm calculates a score based on the logarithm of the value-to-weight ratio, adjusted by an exponential factor that penalizes items with weights significantly lower than the remaining capacity, promoting a balance between item value and space utilization.",
          "code": "import numpy as np\n\ndef score(weight, value, remaining_capacity):\n    if weight > remaining_capacity:\n        return -1e9\n    # Calculate the log of the value-to-weight ratio\n    log_ratio = np.log(value / weight)\n    # Exponential penalty for items much lighter than the remaining capacity\n    exp_penalty = np.exp(-weight / (remaining_capacity + 1))\n    # The final score combines the log ratio and the exponential penalty\n    score = log_ratio * exp_penalty\n    return score",
          "objective": 0.00088,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm prioritizes items based on a combination of their value, the square root of their weight, and an exponential decay factor related to the remaining capacity, aiming to balance high-value, low-weight items with the urgency of filling the knapsack.",
          "code": "import numpy as np\n\ndef score(weight, value, remaining_capacity):\n    if weight > remaining_capacity:\n        return -1e9\n    # Calculate the score using a unique formula that combines value, square root of weight, and an exponential decay factor\n    decay_factor = np.exp(-weight / (remaining_capacity + 1))\n    score = (value * np.sqrt(1/weight)) * decay_factor\n    return score",
          "objective": 0.00152,
          "other_inf": null
     },
     {
          "algorithm": "The algorithm calculates a score for each item based on its value, weight, and the remaining capacity of the knapsack, prioritizing items that offer the best value-to-weight ratio while also considering how much of the item's weight can be utilized given the current capacity.",
          "code": "import numpy as np\n\ndef score(weight, value, remaining_capacity):\n    if weight > remaining_capacity:\n        return -1e9\n    # Score is a combination of value-to-weight ratio and the ratio of weight to remaining capacity,\n    # favoring items with high value per unit of weight and those that better fit the remaining space.\n    score = (value / weight) + (weight / (weight + remaining_capacity))\n    return score",
          "objective": 0.00157,
          "other_inf": null
     },
     {
          "algorithm": "",
          "code": "import numpy as np\n\ndef score(weight, value, remaining_capacity):\n    if weight > remaining_capacity:\n        return -1e9\n    # Calculate the value-to-weight ratio\n    ratio = value / weight\n    # A dynamic adjustment factor that increases with the remaining capacity, promoting higher value items in early stages\n    adjustment_factor = 1 + (remaining_capacity / (weight + 1))\n    # The final score combines the ratio and the adjustment factor\n    score = ratio * adjustment_factor\n    return score",
          "objective": 0.00227,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates a score based on the square root of the value-to-weight ratio, adjusted by a quadratic penalty that increases for items with weights significantly lower than the remaining capacity, aiming to balance item selection between high value and efficient space usage.",
          "code": "import numpy as np\n\ndef score(weight, value, remaining_capacity):\n    if weight > remaining_capacity:\n        return -1e9\n    # Calculate the square root of the value-to-weight ratio\n    sqrt_ratio = np.sqrt(value / weight)\n    # Quadratic penalty for items much lighter than the remaining capacity\n    quad_penalty = (weight - remaining_capacity) ** 2 / (remaining_capacity + 1) ** 2\n    # The final score combines the square root ratio and the quadratic penalty\n    score = sqrt_ratio - quad_penalty\n    return score",
          "objective": 0.00253,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates a score based on the logarithm of the value-to-weight ratio, adjusted by an exponential penalty that heavily penalizes items with weights significantly lower than the remaining capacity, aiming to prioritize both high-value and space-efficient items.",
          "code": "import numpy as np\n\ndef exponential_penalty(weight, remaining_capacity):\n    if weight <= 0 or remaining_capacity <= 0:\n        return 0\n    penalty_factor = np.exp((remaining_capacity - weight) / (remaining_capacity + 1))\n    return penalty_factor\n\ndef score(weight, value, remaining_capacity):\n    if weight > remaining_capacity:\n        return -1e9\n    # Calculate the logarithm of the value-to-weight ratio\n    log_ratio = np.log(value / weight)\n    # Exponential penalty for items much lighter than the remaining capacity\n    exp_penalty = exponential_penalty(weight, remaining_capacity)\n    # The final score combines the logarithmic ratio and the exponential penalty\n    score = log_ratio - exp_penalty\n    return score",
          "objective": 0.00259,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates a score for each item based on its value, weight, and the remaining capacity of the knapsack, using an exponential decay factor to penalize items that are much lighter than the remaining capacity, thus favoring items that better utilize the available space.",
          "code": "import numpy as np\n\ndef score(weight, value, remaining_capacity):\n    if weight > remaining_capacity:\n        return -1e9\n    # Score function: (Value/Weight) * exp(-((Remaining Capacity - Weight) / Remaining Capacity)^2)\n    score = (value / weight) * np.exp(-(((remaining_capacity - weight) / remaining_capacity) ** 2))\n    return score",
          "objective": 0.00322,
          "other_inf": null
     },
     {
          "algorithm": "The new algorithm calculates the score by prioritizing items based on their value-to-weight ratio, adjusted by a factor that penalizes items with weights significantly lower than the remaining capacity, to encourage more balanced space utilization.",
          "code": "import numpy as np\n\ndef score(weight, value, remaining_capacity):\n    if weight > remaining_capacity:\n        return -1e9\n    # Calculate the value-to-weight ratio\n    ratio = value / weight\n    # Adjust the penalty: penalize items with much lower weight than the remaining capacity\n    adjustment_factor = 1 + (remaining_capacity - weight) / (2 * remaining_capacity) if remaining_capacity > 0 else 0\n    # The final score is the ratio multiplied by the adjustment factor\n    score = ratio * adjustment_factor\n    return score",
          "objective": 0.00335,
          "other_inf": null
     }
]